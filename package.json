{
  "name": "resource-routing",
  "version": "0.0.1",
  "description": "restful routes for node expressjs.",
  "author": {
    "name": "Steven Hilton",
    "email": "mshiltonj@gmail.com"
  },
  "dependencies": {
    "inflector": "0.0.1"
  },
  "readme": "# Resource Routes\n\nEasily build routes for an express.js web app. Inspired a little by rails.\n\n# Installation\n\nnpm install resource-routes --save\n\n# Usage\n\nResource Routes expects all your controllers to be in the same directory. A good recommendation is PROJECT_ROOT/controllers \nor PROJECT_ROOT/app/controllers.\n\nResource Routes expects all and to be named like foos_controller.js\nFor example, if you have a User resource or model you want to manage. Resource Routes expects you to manage it\nwith a users_controller.js file. If they don't match this convetion, they may not be found.\n\nRequires express:\n\n    // get your app\n    var express = require('express');\n    var app = express();\n    \n    // get your controller path. NOTE: resolve to full path\n    var path = require('path');\n    var controller_dir = path.resolve(./controllers\");\n    \n    // build your resource routing urls\n    var resources = require('resource-routes');\n    resources(app, controller_dir, \"users\");\n    resources(app, controller_dir, \"users\", \"tables, \"stories\");\n\nThat's it. You now have restful routing for users, and restful routing for stories that include a user_id and a table_id param.\n\nThe resources() function takes a minimum of three paramaters:\n\nOne:   The express ap object\nTwo:   The app controllers directory.\nThree: The entity/class/model_name that will have restful routes.\n\nA fourth parameter, an options object, may be included, but is not yet referenced\n\n\nThe simplest form:\n\n    resources(app, controller_dir, \"users\", {}); // last param optional\n\n\nWill build the 14 standard restful routes for you:\n\n    GET     /users                    #=> UsersController.index\n    GET     /users.format             #=> UsersController.index\n    GET     /users/new                #=> UsersController.new\n    GET     /users/new.format         #=> UsersController.new\n    POST    /users                    #=> UsersController.create\n    POST    /users.format             #=> UsersController.create\n    GET     /users/:id                #=> UsersController.show\n    GET     /users/:id.format         #=> UsersController.show\n    GET     /users/:id/edit           #=> UsersController.edit\n    GET     /users/:id/edit.format    #=> UsersController.edit\n    PUT     /users/:id                #=> UsersController.update\n    PUT     /users/:id.format         #=> UsersController.update\n    DELETE  /users/:id                #=> UsersController.destroy\n    DELETE  /users/:id.format         #=> UsersController.destroy\n\nIf the controller does not exist, the routes will not be created.\n\nIf a specific expected method on the controller do not exist, the \nrelevant route will not get created.\n\n# nested resources\nNested resources are supported. By passing more than the minimum number of paramaters, the extra\nstrings are assumed to be parent resources. For example, a call like:\n\n\n    resources(app, controller_dir, \"users\", \"tables, \"stories\", {}); // again, last param optional\n\nResourse Routs will build the routes for stories, as a nested \nresource for tables and users, and the params for the parent resources \nwill be included the request. \n\nThese are the routes that will get created with that method call:\n\n    GET     /users/:user_id/tables/:table_id/stories                   #=> StoriesController.index\n    GET     /users/:user_id/tables/:table_id/stories.format            #=> StoriesController.index\n    GET     /users/:user_id/tables/:table_id/stories/new               #=> StoriesController.new\n    GET     /users/:user_id/tables/:table_id/stories/new.format        #=> StoriesController.new\n    POST    /users/:user_id/tables/:table_id/stories                   #=> StoriesController.create\n    POST    /users/:user_id/tables/:table_id/stories.format            #=> StoriesController.create\n    GET     /users/:user_id/tables/:table_id/stories/:id               #=> StoriesController.show\n    GET     /users/:user_id/tables/:table_id/stories/:id.format        #=> StoriesController.show\n    GET     /users/:user_id/tables/:table_id/stories/:id/edit          #=> StoriesController.edit\n    GET     /users/:user_id/tables/:table_id/stories/:id/edit.format   #=> StoriesController.edit\n    PUT     /users/:user_id/tables/:table_id/stories/:id               #=> StoriesController.update\n    PUT     /users/:user_id/tables/:table_id/stories/:id.format        #=> StoriesController.update\n    DELETE  /users/:user_id/tables/:table_id/stories/:id               #=> StoriesController.destroy\n    DELETE  /users/:user_id/tables/:table_id/stories/:id.format        #=> StoriesController.destroy\n\n# TODO\n\nStill a work in progress. Need to be able to: \n* restrict default routes\n* declare additional routes.\n* define namespaces\n\n# Authors\n* Steven Hilton <mshiltonj@gmail.com> @mshiltonj\n\n# LICENSE\n\nMIT. see (License)[./LICENSE]\n",
  "readmeFilename": "README.md",
  "_id": "resource-routes@0.0.1",
  "dist": {
    "shasum": "6367b956802412bc0d7fda9e6ba319e7d9fb982c"
  },
  "_from": "../../resource-routes/"
}
